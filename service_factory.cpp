// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `service_factory.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include "service_factory.h"
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#	if ICE_INT_VERSION / 100 != 306
#		error Ice version mismatch!
#	endif
#	if ICE_INT_VERSION % 100 > 50
#		error Beta header file detected
#	endif
#	if ICE_INT_VERSION % 100 < 2
#		error Ice patch level mismatch!
#	endif
#endif

namespace
{

const ::std::string __SRV__CoolResultListener__onResult_name = "onResult";

const ::std::string __SRV__CoolService__SetListener_name = "SetListener";

const ::std::string __SRV__CoolService__ApplyValue_name = "ApplyValue";

const ::std::string __SRV__ServiceFactory__GetCoolService_name = "GetCoolService";

}
::IceProxy::Ice::Object* ::IceProxy::SRV::upCast(::IceProxy::SRV::CoolResultListener* p) { return p; }

void
::IceProxy::SRV::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::SRV::CoolResultListener>& v)
{
	::Ice::ObjectPrx proxy;
	__is->read(proxy);
	if(!proxy)
	{
		v = 0;
	}
	else
	{
		v = new ::IceProxy::SRV::CoolResultListener;
		v->__copyFrom(proxy);
	}
}

void
IceProxy::SRV::CoolResultListener::onResult(::Ice::Int __p_value, const ::Ice::Context* __ctx)
{
	::IceInternal::Outgoing __og(this, __SRV__CoolResultListener__onResult_name, ::Ice::Normal, __ctx);
	try
	{
		::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
		__os->write(__p_value);
		__og.endWriteParams();
	}
	catch(const ::Ice::LocalException& __ex)
	{
		__og.abort(__ex);
	}
	__invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::SRV::CoolResultListener::begin_onResult(::Ice::Int __p_value, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
	::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __SRV__CoolResultListener__onResult_name, __del, __cookie);
	try
	{
		__result->prepare(__SRV__CoolResultListener__onResult_name, ::Ice::Normal, __ctx);
		::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
		__os->write(__p_value);
		__result->endWriteParams();
		__result->invoke();
	}
	catch(const ::Ice::Exception& __ex)
	{
		__result->abort(__ex);
	}
	return __result;
}

void
IceProxy::SRV::CoolResultListener::end_onResult(const ::Ice::AsyncResultPtr& __result)
{
	__end(__result, __SRV__CoolResultListener__onResult_name);
}

const ::std::string&
IceProxy::SRV::CoolResultListener::ice_staticId()
{
	return ::SRV::CoolResultListener::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::SRV::CoolResultListener::__newInstance() const
{
	return new CoolResultListener;
}
::IceProxy::Ice::Object* ::IceProxy::SRV::upCast(::IceProxy::SRV::CoolService* p) { return p; }

void
::IceProxy::SRV::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::SRV::CoolService>& v)
{
	::Ice::ObjectPrx proxy;
	__is->read(proxy);
	if(!proxy)
	{
		v = 0;
	}
	else
	{
		v = new ::IceProxy::SRV::CoolService;
		v->__copyFrom(proxy);
	}
}

void
IceProxy::SRV::CoolService::SetListener(const ::SRV::CoolResultListenerPrx& __p_listener, const ::Ice::Context* __ctx)
{
	::IceInternal::Outgoing __og(this, __SRV__CoolService__SetListener_name, ::Ice::Normal, __ctx);
	try
	{
		::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
		__os->write(__p_listener);
		__og.endWriteParams();
	}
	catch(const ::Ice::LocalException& __ex)
	{
		__og.abort(__ex);
	}
	__invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::SRV::CoolService::begin_SetListener(const ::SRV::CoolResultListenerPrx& __p_listener, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
	::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __SRV__CoolService__SetListener_name, __del, __cookie);
	try
	{
		__result->prepare(__SRV__CoolService__SetListener_name, ::Ice::Normal, __ctx);
		::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
		__os->write(__p_listener);
		__result->endWriteParams();
		__result->invoke();
	}
	catch(const ::Ice::Exception& __ex)
	{
		__result->abort(__ex);
	}
	return __result;
}

void
IceProxy::SRV::CoolService::end_SetListener(const ::Ice::AsyncResultPtr& __result)
{
	__end(__result, __SRV__CoolService__SetListener_name);
}

void
IceProxy::SRV::CoolService::ApplyValue(::Ice::Int __p_value, const ::Ice::Context* __ctx)
{
	::IceInternal::Outgoing __og(this, __SRV__CoolService__ApplyValue_name, ::Ice::Normal, __ctx);
	try
	{
		::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
		__os->write(__p_value);
		__og.endWriteParams();
	}
	catch(const ::Ice::LocalException& __ex)
	{
		__og.abort(__ex);
	}
	__invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::SRV::CoolService::begin_ApplyValue(::Ice::Int __p_value, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
	::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __SRV__CoolService__ApplyValue_name, __del, __cookie);
	try
	{
		__result->prepare(__SRV__CoolService__ApplyValue_name, ::Ice::Normal, __ctx);
		::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
		__os->write(__p_value);
		__result->endWriteParams();
		__result->invoke();
	}
	catch(const ::Ice::Exception& __ex)
	{
		__result->abort(__ex);
	}
	return __result;
}

void
IceProxy::SRV::CoolService::end_ApplyValue(const ::Ice::AsyncResultPtr& __result)
{
	__end(__result, __SRV__CoolService__ApplyValue_name);
}

const ::std::string&
IceProxy::SRV::CoolService::ice_staticId()
{
	return ::SRV::CoolService::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::SRV::CoolService::__newInstance() const
{
	return new CoolService;
}
::IceProxy::Ice::Object* ::IceProxy::SRV::upCast(::IceProxy::SRV::ServiceFactory* p) { return p; }

void
::IceProxy::SRV::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::SRV::ServiceFactory>& v)
{
	::Ice::ObjectPrx proxy;
	__is->read(proxy);
	if(!proxy)
	{
		v = 0;
	}
	else
	{
		v = new ::IceProxy::SRV::ServiceFactory;
		v->__copyFrom(proxy);
	}
}

::SRV::CoolServicePrx
IceProxy::SRV::ServiceFactory::GetCoolService(const ::Ice::Context* __ctx)
{
	__checkTwowayOnly(__SRV__ServiceFactory__GetCoolService_name);
	::IceInternal::Outgoing __og(this, __SRV__ServiceFactory__GetCoolService_name, ::Ice::Normal, __ctx);
	__og.writeEmptyParams();
	if(!__og.invoke())
	{
		try
		{
			__og.throwUserException();
		}
		catch(const ::Ice::UserException& __ex)
		{
			::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
			throw __uue;
		}
	}
	::SRV::CoolServicePrx __ret;
	::IceInternal::BasicStream* __is = __og.startReadParams();
	__is->read(__ret);
	__og.endReadParams();
	return __ret;
}

::Ice::AsyncResultPtr
IceProxy::SRV::ServiceFactory::begin_GetCoolService(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
	__checkAsyncTwowayOnly(__SRV__ServiceFactory__GetCoolService_name);
	::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __SRV__ServiceFactory__GetCoolService_name, __del, __cookie);
	try
	{
		__result->prepare(__SRV__ServiceFactory__GetCoolService_name, ::Ice::Normal, __ctx);
		__result->writeEmptyParams();
		__result->invoke();
	}
	catch(const ::Ice::Exception& __ex)
	{
		__result->abort(__ex);
	}
	return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::SRV::ServiceFactory::__begin_GetCoolService(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::SRV::CoolServicePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
	class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
	{
	public:

		Cpp11CB(const ::std::function<void (const ::SRV::CoolServicePrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
			::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
			_response(responseFunc)
		{
			CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
		}

		virtual void completed(const ::Ice::AsyncResultPtr& __result) const
		{
			::SRV::ServiceFactoryPrx __proxy = ::SRV::ServiceFactoryPrx::uncheckedCast(__result->getProxy());
			::SRV::CoolServicePrx __ret;
			try
			{
				__ret = __proxy->end_GetCoolService(__result);
			}
			catch(const ::Ice::Exception& ex)
			{
				Cpp11FnCallbackNC::exception(__result, ex);
				return;
			}
			if(_response != nullptr)
			{
				_response(__ret);
			}
		}

	private:

		::std::function<void (const ::SRV::CoolServicePrx&)> _response;
	};
	return begin_GetCoolService(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::SRV::CoolServicePrx
IceProxy::SRV::ServiceFactory::end_GetCoolService(const ::Ice::AsyncResultPtr& __result)
{
	::Ice::AsyncResult::__check(__result, this, __SRV__ServiceFactory__GetCoolService_name);
	::SRV::CoolServicePrx __ret;
	if(!__result->__wait())
	{
		try
		{
			__result->__throwUserException();
		}
		catch(const ::Ice::UserException& __ex)
		{
			throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
		}
	}
	::IceInternal::BasicStream* __is = __result->__startReadParams();
	__is->read(__ret);
	__result->__endReadParams();
	return __ret;
}

const ::std::string&
IceProxy::SRV::ServiceFactory::ice_staticId()
{
	return ::SRV::ServiceFactory::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::SRV::ServiceFactory::__newInstance() const
{
	return new ServiceFactory;
}

::Ice::Object* SRV::upCast(::SRV::CoolResultListener* p) { return p; }

namespace
{
const ::std::string __SRV__CoolResultListener_ids[2] =
{
	"::Ice::Object",
	"::SRV::CoolResultListener"
};

}

bool
SRV::CoolResultListener::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
	return ::std::binary_search(__SRV__CoolResultListener_ids, __SRV__CoolResultListener_ids + 2, _s);
}

::std::vector< ::std::string>
SRV::CoolResultListener::ice_ids(const ::Ice::Current&) const
{
	return ::std::vector< ::std::string>(&__SRV__CoolResultListener_ids[0], &__SRV__CoolResultListener_ids[2]);
}

const ::std::string&
SRV::CoolResultListener::ice_id(const ::Ice::Current&) const
{
	return __SRV__CoolResultListener_ids[1];
}

const ::std::string&
SRV::CoolResultListener::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
	static const ::std::string typeId = "::SRV::CoolResultListener";
	return typeId;
#else
	return __SRV__CoolResultListener_ids[1];
#endif
}

::Ice::DispatchStatus
SRV::CoolResultListener::___onResult(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
	__checkMode(::Ice::Normal, __current.mode);
	::IceInternal::BasicStream* __is = __inS.startReadParams();
	::Ice::Int __p_value;
	__is->read(__p_value);
	__inS.endReadParams();
	onResult(__p_value, __current);
	__inS.__writeEmptyParams();
	return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __SRV__CoolResultListener_all[] =
{
	"ice_id",
	"ice_ids",
	"ice_isA",
	"ice_ping",
	"onResult"
};

}

::Ice::DispatchStatus
SRV::CoolResultListener::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
	::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__SRV__CoolResultListener_all, __SRV__CoolResultListener_all + 5, current.operation);
	if(r.first == r.second)
	{
		throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
	}

	switch(r.first - __SRV__CoolResultListener_all)
	{
		case 0:
		{
			return ___ice_id(in, current);
		}
		case 1:
		{
			return ___ice_ids(in, current);
		}
		case 2:
		{
			return ___ice_isA(in, current);
		}
		case 3:
		{
			return ___ice_ping(in, current);
		}
		case 4:
		{
			return ___onResult(in, current);
		}
	}

	assert(false);
	throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
SRV::CoolResultListener::__writeImpl(::IceInternal::BasicStream* __os) const
{
	__os->startWriteSlice(ice_staticId(), -1, true);
	__os->endWriteSlice();
}

void
SRV::CoolResultListener::__readImpl(::IceInternal::BasicStream* __is)
{
	__is->startReadSlice();
	__is->endReadSlice();
}

void
SRV::__patch(CoolResultListenerPtr& handle, const ::Ice::ObjectPtr& v)
{
	handle = ::SRV::CoolResultListenerPtr::dynamicCast(v);
	if(v && !handle)
	{
		IceInternal::Ex::throwUOE(::SRV::CoolResultListener::ice_staticId(), v);
	}
}

::Ice::Object* SRV::upCast(::SRV::CoolService* p) { return p; }

namespace
{
const ::std::string __SRV__CoolService_ids[2] =
{
	"::Ice::Object",
	"::SRV::CoolService"
};

}

bool
SRV::CoolService::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
	return ::std::binary_search(__SRV__CoolService_ids, __SRV__CoolService_ids + 2, _s);
}

::std::vector< ::std::string>
SRV::CoolService::ice_ids(const ::Ice::Current&) const
{
	return ::std::vector< ::std::string>(&__SRV__CoolService_ids[0], &__SRV__CoolService_ids[2]);
}

const ::std::string&
SRV::CoolService::ice_id(const ::Ice::Current&) const
{
	return __SRV__CoolService_ids[1];
}

const ::std::string&
SRV::CoolService::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
	static const ::std::string typeId = "::SRV::CoolService";
	return typeId;
#else
	return __SRV__CoolService_ids[1];
#endif
}

::Ice::DispatchStatus
SRV::CoolService::___SetListener(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
	__checkMode(::Ice::Normal, __current.mode);
	::IceInternal::BasicStream* __is = __inS.startReadParams();
	::SRV::CoolResultListenerPrx __p_listener;
	__is->read(__p_listener);
	__inS.endReadParams();
	SetListener(__p_listener, __current);
	__inS.__writeEmptyParams();
	return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
SRV::CoolService::___ApplyValue(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
	__checkMode(::Ice::Normal, __current.mode);
	::IceInternal::BasicStream* __is = __inS.startReadParams();
	::Ice::Int __p_value;
	__is->read(__p_value);
	__inS.endReadParams();
	ApplyValue(__p_value, __current);
	__inS.__writeEmptyParams();
	return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __SRV__CoolService_all[] =
{
	"ApplyValue",
	"SetListener",
	"ice_id",
	"ice_ids",
	"ice_isA",
	"ice_ping"
};

}

::Ice::DispatchStatus
SRV::CoolService::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
	::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__SRV__CoolService_all, __SRV__CoolService_all + 6, current.operation);
	if(r.first == r.second)
	{
		throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
	}

	switch(r.first - __SRV__CoolService_all)
	{
		case 0:
		{
			return ___ApplyValue(in, current);
		}
		case 1:
		{
			return ___SetListener(in, current);
		}
		case 2:
		{
			return ___ice_id(in, current);
		}
		case 3:
		{
			return ___ice_ids(in, current);
		}
		case 4:
		{
			return ___ice_isA(in, current);
		}
		case 5:
		{
			return ___ice_ping(in, current);
		}
	}

	assert(false);
	throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
SRV::CoolService::__writeImpl(::IceInternal::BasicStream* __os) const
{
	__os->startWriteSlice(ice_staticId(), -1, true);
	__os->endWriteSlice();
}

void
SRV::CoolService::__readImpl(::IceInternal::BasicStream* __is)
{
	__is->startReadSlice();
	__is->endReadSlice();
}

void
SRV::__patch(CoolServicePtr& handle, const ::Ice::ObjectPtr& v)
{
	handle = ::SRV::CoolServicePtr::dynamicCast(v);
	if(v && !handle)
	{
		IceInternal::Ex::throwUOE(::SRV::CoolService::ice_staticId(), v);
	}
}

::Ice::Object* SRV::upCast(::SRV::ServiceFactory* p) { return p; }

namespace
{
const ::std::string __SRV__ServiceFactory_ids[2] =
{
	"::Ice::Object",
	"::SRV::ServiceFactory"
};

}

bool
SRV::ServiceFactory::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
	return ::std::binary_search(__SRV__ServiceFactory_ids, __SRV__ServiceFactory_ids + 2, _s);
}

::std::vector< ::std::string>
SRV::ServiceFactory::ice_ids(const ::Ice::Current&) const
{
	return ::std::vector< ::std::string>(&__SRV__ServiceFactory_ids[0], &__SRV__ServiceFactory_ids[2]);
}

const ::std::string&
SRV::ServiceFactory::ice_id(const ::Ice::Current&) const
{
	return __SRV__ServiceFactory_ids[1];
}

const ::std::string&
SRV::ServiceFactory::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
	static const ::std::string typeId = "::SRV::ServiceFactory";
	return typeId;
#else
	return __SRV__ServiceFactory_ids[1];
#endif
}

::Ice::DispatchStatus
SRV::ServiceFactory::___GetCoolService(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
	__checkMode(::Ice::Normal, __current.mode);
	__inS.readEmptyParams();
	::SRV::CoolServicePrx __ret = GetCoolService(__current);
	::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
	__os->write(__ret);
	__inS.__endWriteParams(true);
	return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __SRV__ServiceFactory_all[] =
{
	"GetCoolService",
	"ice_id",
	"ice_ids",
	"ice_isA",
	"ice_ping"
};

}

::Ice::DispatchStatus
SRV::ServiceFactory::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
	::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__SRV__ServiceFactory_all, __SRV__ServiceFactory_all + 5, current.operation);
	if(r.first == r.second)
	{
		throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
	}

	switch(r.first - __SRV__ServiceFactory_all)
	{
		case 0:
		{
			return ___GetCoolService(in, current);
		}
		case 1:
		{
			return ___ice_id(in, current);
		}
		case 2:
		{
			return ___ice_ids(in, current);
		}
		case 3:
		{
			return ___ice_isA(in, current);
		}
		case 4:
		{
			return ___ice_ping(in, current);
		}
	}

	assert(false);
	throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
SRV::ServiceFactory::__writeImpl(::IceInternal::BasicStream* __os) const
{
	__os->startWriteSlice(ice_staticId(), -1, true);
	__os->endWriteSlice();
}

void
SRV::ServiceFactory::__readImpl(::IceInternal::BasicStream* __is)
{
	__is->startReadSlice();
	__is->endReadSlice();
}

void
SRV::__patch(ServiceFactoryPtr& handle, const ::Ice::ObjectPtr& v)
{
	handle = ::SRV::ServiceFactoryPtr::dynamicCast(v);
	if(v && !handle)
	{
		IceInternal::Ex::throwUOE(::SRV::ServiceFactory::ice_staticId(), v);
	}
}
